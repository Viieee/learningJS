every object have a prototype
prototype is an object or a fallback objects
meaning that prototype is an object that js will be look at if it searches a certain property or 
    method it can't find on the object it's currently looking at
example :

// theres an object called 'contoh' with 'property1' and 'method1' as the property and method inside it
person = {
   property1: '',
   method1: function(){

   }
}

// you try to call method that doesn't exist in the object, in this example 'method2'
person.method2();
// obviously the method we try to call doesn't exist
// this is where prototype role comes in
// it serve as a fallback object
// so js will look at the prototype for the 'method2' method
// this prototype also have a prototype
// and js will look at the prototype of the prototype
// it will keep going until it reaches the end, if it doesn't find any then undefined returned

// theres 2 type of prototypes:
// the prototype exist in every object is '__proto__'
// the main use of it is to provide global default methods to  objects 

// another type of prototype exist in function constructor called 'prototype'
// this 'prototype' will be assigned to every object based on this function
// and can be assigned as fallback value

const userA = new User();
userA.__proto__ === User.prototype; // true
userA.__proto__ === User.__proto__ // false


// you can set the prototype of an object
// example :

class Person{

}

equivalent to

function Person(){ // this function is called constructor function

}

build a new object based on the blueprint 

const person = new Person();

we want to set fallback method for this Person object

Person.prototype = { 
    method1:function(){

    }
}

if any object based on the Person class/constructor function calling method1 which doesn't exist in the class/constructor function
the method1 we set in prototype will be executed



